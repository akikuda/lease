**2025-05-11 22:46**
### WebMVC和WebFlux的区别
WebMVC与WebFlux是两个不同的框架,在同一项目中一般无法同时使用。
WebMVC 基于Servlet API，采用同步阻塞模型，每个请求分配独立线程，适合传统CRUD应用；
WebFlux 基于响应式编程（Reactive Streams），使用非阻塞异步模型，通过事件循环处理高并发请求，适合低延迟、高吞吐场景（如流处理）。
WebMVC依赖Servlet容器（如Tomcat），WebFlux可适配Netty等非Servlet环境，后者对函数式编程和异步思维要求更高。


### 流式输出的实现方式
- SSE长连接
- 基于WebFlux的Flux/Mono
- 注意：请求头Content-Type必须为text/event-stream，否则浏览器无法解析。

### AI的Tool调用问题
Ai通过异步调用Tool，在项目中需要用到ThreadLocal来传递上下文信息，
但在异步调用中，ThreadLocal会丢失，导致上下文信息丢失。
比如userID无法获取
解决：

- 在异步调用中，将上下文信息通过参数传递给Tool
- 在需要的Tool中，通过userInfoService获取用户信息。(本项目中采用)

### 待办
- 将AI的聊天记录持久化，而不是通过内存持久化 ×

**2025-05-12 23:09**
# 消息队列的消息顺序性问题
RabbitMQ:通常是由于**多个消费者并发消费同一个队列中的消息**导致的问题 <br>
Kafka:主要发生在**消费者端使用多线程并发处理消息**时<br>
RocketMQ:通常是由于同一订单号的消息进入了不同的MessageQueue
## 如何保证顺序性
- RabbitMQ:
  - 拆分多个队列：将消息**拆分到多个队列**中，**每个队列对应一个消费者**。这样可以确保同一订单号的消息只会被一个消费者顺序消费，从而保证消息的顺序性
  - 单个队列单个消费者：使用**一个队列对应一个消费者**，然后在消费者内部使用内存队列进行排队，再分发给不同的工作线程处理
- Kafka:
    - 同一订单号的消息发送到同一个分区：生产者在发送消息时，可以指定一个key（如订单号），确保同一订单号的消息发送到同一个分区。这样消费者消费到的消息也是有序的
    - 使用内存队列：在消费者端增加一个内存队列，每个线程只负责处理其中一个内存队列的消息，同一订单号的消息发送到同一个内存队列中
- RocketMQ:
    - 同一订单号的消息进入同一个MessageQueue：确保同一订单号的消息进入同一个MessageQueue，因为同一个MessageQueue内的消息是有序的
    - 单个MessageQueue单个消费者：一个MessageQueue中的消息只能交给一个消费者处理，从而保证消息的顺序性

# mybatis-plus批量插入
```
  mybatis-plus的顶级IService接口有一个saveBatch()方法，
  但是它会执行多条insertSql，其实就是一个for循环单条插入
  在数据量大的时候效率会非常差，
-----------
如果我们是mysql数据库，又不想自己写mapper.xml，
mybatis-plus提供了InsertBatchSomeColumn批量insert方法，
但需要我们自己注入下。

它的实现的效果是：
insert into table values (x1, y1, z1), (x2, y2, z2), (x…, y…, z…);
也就是拼接sql语句，然后批量执行，效率较好。
```
**2025-05-14 17:39**
# 1.SSE 与 WebSocket区别
WebSocket：全双工通信，客户端和服务器都能主动发送数据
SSE：**单向通信**，只能服务器向客户端推送
区别：
WebSocket需要特殊的服务器支持，SSE基于普通HTTP
WebSocket可传输二进制数据，SSE只能传文本
SSE有自动重连机制，WebSocket需手动实现

# 2. SSE的技术原理
```
   SSE(server-sent events服务器发送事件)
   基于HTTP协议，利用持久化连接（HTTP persistent connection）实现服务器向客户端的单向数据流传输。
   核心技术点：
   Content-Type: text/event-stream：特殊的MIME类型
   标准化的消息格式：data: 消息内容\n\n格式
   持久连接：一次建立连接后持续保持
   自动重连：浏览器自动处理连接中断
```
# 当前项目的前端使用SSE还是WebSocket更合适。
这个项目的前端是一个租房应用H5版本，智能客服功能主要是用户向AI发送问题，AI生成回答并实时流式返回给用户。 
```
评估因素：
 通信方向:
  SSE: 单向通信（服务器->客户端）
  WebSocket: 双向通信（服务器<->客户端）
 数据流模式:
  智能客服场景中，用户发送一条消息，AI会生成较长的回复，回复过程需要流式显示
  主要的数据流是从服务器到客户端的文本流
 实现复杂度:
  SSE: 实现简单，客户端使用原生EventSource，服务器只需正确设置HTTP头和格式化数据
  WebSocket: 需要专门的WebSocket服务器，实现稍复杂
 性能考虑:
  用户量: 如果是租房应用的客服功能，同时使用的用户数量可能不会特别多
  消息频率: 用户发送消息频率通常不高，主要是AI回复时需要流式传输
 功能需求:
  智能客服主要需要显示AI逐字生成回复的效果
  是否需要其他复杂功能如状态同步、多端共享会话等
```
### 待办
- 在[AiChatHistoryService.java](web/web-app/src/main/java/com/toki/web/app/service/AiChatHistoryService.java)中实现AI聊天记录的持久化，然后在[AiChatRedisMemory.java](web/web-app/src/main/java/com/toki/web/app/config/AiConfig/AiChatRedisMemory.java)中调用
  -  考虑修改实体类[AiChatHistory.java](model/src/main/java/com/toki/model/entity/AiChatHistory.java)，使其与MessageVO一致

- 保存到redis的方法AiChatRedisMemory中已有，需要在AiChatHistoryService中实现保存到数据库的方法；同样，获取的方法AiChatRedisMemory中已有